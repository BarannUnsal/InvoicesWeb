// <auto-generated />
using System;
using InvoicesAPI.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace InvoicesAPI.DataAccess.Migrations
{
    [DbContext(typeof(InvoicesApiDbContext))]
    [Migration("20220606204938_mig_1")]
    partial class mig_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("InvoiceInvoiceImageFile", b =>
                {
                    b.Property<Guid>("InvoiceImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvoicesId")
                        .HasColumnType("uuid");

                    b.HasKey("InvoiceImageFilesId", "InvoicesId");

                    b.HasIndex("InvoicesId");

                    b.ToTable("InvoiceInvoiceImageFile");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CardNo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SecurityNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AptNo")
                        .HasColumnType("integer");

                    b.Property<int>("Block")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isEmpty")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarPlate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<long>("TcNo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isHaveCar")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.InvoiceImageFile", b =>
                {
                    b.HasBaseType("InvoicesAPI.Entity.File");

                    b.HasDiscriminator().HasValue("InvoiceImageFile");
                });

            modelBuilder.Entity("InvoiceInvoiceImageFile", b =>
                {
                    b.HasOne("InvoicesAPI.Entity.InvoiceImageFile", null)
                        .WithMany()
                        .HasForeignKey("InvoiceImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoicesAPI.Entity.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvoicesAPI.Entity.CreditCard", b =>
                {
                    b.HasOne("InvoicesAPI.Entity.User", null)
                        .WithMany("CreditCards")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.Invoice", b =>
                {
                    b.HasOne("InvoicesAPI.Entity.User", null)
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.User", b =>
                {
                    b.HasOne("InvoicesAPI.Entity.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("InvoicesAPI.Entity.User", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
